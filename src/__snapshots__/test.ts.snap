// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`route generation typescript 1`] = `
"// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'
// Run \`yarn nextjs-routes\` to regenerate this file.

type Route =
  | { pathname: '/404' }
  | { pathname: '/[foo]', query: { foo: string; } }
  | { pathname: '/[foo]/[bar]/[baz]', query: { foo: string; bar: string; baz: string; } }
  | { pathname: '/[foo]/bar/[baz]', query: { foo: string; baz: string; } }
  | { pathname: '/[foo]/bar/[baz]/foo/[bar]', query: { foo: string; baz: string; bar: string; } }
  | { pathname: '/[foo]/baz', query: { foo: string; } }
  | { pathname: '/_debug/health-check' }
  | { pathname: '/_error' }
  | { pathname: '/api/[[...segments]]', query: { segments?: string[]; } }
  | { pathname: '/api/[...segments]', query: { segments: string[]; } }
  | { pathname: '/api/bar' }
  | { pathname: '/foo/[slug]', query: { slug: string; } }
  | { pathname: '/' }
  | { pathname: '/not-found' }
  | { pathname: '/settings/bars/[bar]', query: { bar: string; } }
  | { pathname: '/settings/bars/[bar]/baz', query: { bar: string; } }
  | { pathname: '/settings/foo' }
  | { pathname: '/settings' }

type Pathname = Route[\\"pathname\\"];

type Query = {
  [K in Route as K[\\"pathname\\"]]: K[\\"query\\"] extends Record<string, string>
    ? K[\\"query\\"]
    : never;
};

declare module \\"next/link\\" {
  import type { LinkProps as NextLinkProps } from \\"next/dist/client/link\\";
  import type { PropsWithChildren, MouseEventHandler } from \\"react\\";

  export interface LinkProps extends Omit<NextLinkProps, \\"href\\"> {
    href: Route;
  }

  declare function Link(
    props: PropsWithChildren<LinkProps>
  ): DetailedReactHTMLElement<
    {
      onMouseEnter?: MouseEventHandler<Element> | undefined;
      onClick: MouseEventHandler;
      href?: string | undefined;
      ref?: any;
    },
    HTMLElement
  >;

  export default Link;
}

declare module \\"next/router\\" {
  import type { NextRouter as Router } from \\"next/dist/client/router\\";
  export { RouterEvent } from \\"next/dist/client/router\\";

  type TransitionOptions = Parameters<Router[\\"push\\"]>[2];

  export interface NextRouter<P extends Pathname = Pathname> extends Omit<Router, \\"push\\" | \\"replace\\"> {
    pathname: P;
    route: P; 
    query: Query[P]
    push(url: Route, as?: string, options?: TransitionOptions): Promise<boolean>;
    replace(
      url: Route,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
  }

  export function useRouter<P extends Pathname>(): NextRouter<P>;
}

"
`;
